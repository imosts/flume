# -*- coding: iso-8859-1 -*-
"""
    Dictionaries modified for use with flume shared data server.

"""
# cPickle can encode normal and Unicode strings
# see http://docs.python.org/lib/node66.html
try:
    import cPickle as pickle
except ImportError:
    import pickle

# Set pickle protocol, see http://docs.python.org/lib/node64.html
PICKLE_PROTOCOL = pickle.HIGHEST_PROTOCOL

class DictDict:
    """a dictionary of Dict objects

       Config:
           cfg.page_dict_regex
               Default: ".*Dict$"  Defs$ Vars$ ???????????????????
    """

    def __init__(self):
        pass

    def reset(self):
        pass

    def debug_out(self, s):
        if False:
            self.request.log (s)

    def has_key(self, dictname, key):
        self.debug_out ("flumedicts.DictDict: called has_key, return True!")
        return True

    def keys(self, dictname):
        """get keys of dict <dictname>"""
        self.debug_out ("flumedicts.DictDict: called keys, but we dont support it!")
        import error
        raise error.UnsupportedError, "I dont know who the keys are!"

    def values(self, dictname):
        """get values of dict <dictname>"""
        self.debug_out ("flumedicts.DictDict: called values, but we dont support it!")
        import error
        raise error.UnsupportedError, "I dont know who the values are!"

    def dict(self, dictname):
        """get dict <dictname>"""
        try:
            dict = self.dictdict[dictname]
        except KeyError:
            return {}
        return dict

    def adddict(self, request, dictname):
        """add a new dict (will be read from the wiki page)"""
        self.debug_out ("flumedicts.DictDict: called adddict, do nothing!")
        pass

    def has_dict(self, dictname):
        self.debug_out ("flumedicts.DictDict: called has_dict, return False!")
        return False

    def keydict(self, key):
        """list all dicts that contain key"""
        self.debug_out ("flumedicts.DictDict: called keydict, but dont support it!")
        import error
        raise error.UnsupportedError, "I dont know who the dicts are!"


class GroupDict(DictDict):
    """a dictionary of Group objects

       Config:
           cfg.page_group_regex
               Default: ".*Group$"
    """

    def __init__(self, request):
        self.request = request
        self.debug_out ("flumedicts.GroupDict: initialized")

    def reset(self):
        self.debug_out ("flumedicts.GroupDict: called reset, but we just ignore it!")
        pass

    def has_member(self, groupname, member):
        self.debug_out ("flumedicts.GroupDict: called has_member, but we always return True!")
        return True

    def members(self, groupname):
        """get members of group <groupname>"""
        self.debug_out ("flumedicts.GroupDict: called members, but dont support it!")
        import error
        raise error.UnsupportedError, "I dont know who the members are!"

    def addgroup(self, request, groupname):
        """add a new group (will be read from the wiki page)"""
        self.debug_out ("flumedicts.GroupDict: called addgroup, but we just ignore it!")
        pass

    def hasgroup(self, groupname):
        self.debug_out ("flumedicts.GroupDict: called hasgroup, but we always return True!")
        return True

    def membergroups(self, member):
        """list all groups where member is a member of"""
        self.debug_out ("flumedicts.GroupDict: called membergroups, but dont support it!")
        import error
        raise error.UnsupportedError, "I dont know who the membergroups are!"



