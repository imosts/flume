
Trying to Get Plash Working (correctly)
   Max Krohn 5.2.07

1. Checkout:
	(see page http://plash.beasts.org/download.html)

% svn co svn://svn.gna.org/svn/plash/trunk plash

Note that plash also has packages and tarballs.

2. Need to checkout/build glibc independently.  I did this:

# apt-get -b source glibc

And chilled for a while, while it ran.  Note, the full build wasn't probably
strictly necessary, but I wanted to make sure that Ubuntu was able to apply
all of its patches and so on. Question: how can you get -j10 into this
process?

Anyway, the whole build takes about 1hr, and builds tons of crap like
glibc for linux-xen.  Eh, probably need to find something better for this 
step.

3. Re-tar GCC

   % su
   # cd /usr/src/glibc-2.4/build-tree
   # tar -cjvf ../../glibc-2.4.tar.bz2 glibc-2.4

4. Build glibc:

   % cd back/into/plash/dir
   % sh -x build-glibc.sh 2.4

Turns out this didn't work; some weird circularity in the configure
scripts denies us.  Oh well, so much for the Debian patches.  Let's
just try unpatched glibc.

=====

2. Get libc:
   
  % ftp://ftp.gnu.org/gnu/glibc/glibc-2.5.tar.bz2

3. Build libc in plash land:

  % sh -x build-glibc.sh 2.5

This will make an object directory in the source dir, will all libc
sources in there. 

4. Make a configure:

  % autoconf

5. Run configure:

  % GLIBC_DIR=glibc-2.5-objs ./configure

6. Build stuff:
  # apt-get install libreadline5-dev
  % sh -x make.sh

This works, partially, but then fails on libc.so, which is after ld.so,
so that's fine with us.  As it turns out, though, the ld.so that's
generated by plash doesn't actually work.  I tried this, from the top
dir in the plash directory:

hydra$ ./shobj/ld.so `which bash`
/bin/bash: error while loading shared libraries: /bin/bash: cannot open shared object file: Error 38

However, other versions of ld.so, even from conflicted libc versions, appeared
to work ok.  For instance, hydra has glibc version 2.4, yet:

hydra$ ./glibc-2.5-objs/elf/ld-linux.so.2 --list `which bash`
        linux-gate.so.1 =>  (0xffffe000)
        libncurses.so.5 => /lib/libncurses.so.5 (0xb7ec3000)
        libdl.so.2 => /lib/tls/i686/cmov/libdl.so.2 (0xb7ebf000)
        libc.so.6 => /lib/tls/i686/cmov/libc.so.6 (0xb7d8b000)
        /lib/ld-linux.so.2 => ./glibc-2.5-objs/elf/ld-linux.so.2 (0x80000000)

hydra$  ./glibc-2.5-objs/elf/ld-linux.so.2 --verify  `which bash`
6

hydra$ ./glibc-2.5-objs/elf/ld-linux.so.2 `which tcsh`
hydra:/disk/max/src/plash> 

So that's cool. This means we might be able to get away with only releasing
one version of ld.so, if it's sufficiently backwards-compatible. Maybe.



