diff -ru ../linux-source-2.6.17/include/linux/security.h ./include/linux/security.h
--- ../linux-source-2.6.17/include/linux/security.h	2006-10-01 12:43:02.000000000 -0400
+++ ./include/linux/security.h	2007-07-24 20:04:22.000000000 -0400
@@ -32,6 +32,8 @@
 #include <linux/sched.h>
 #include <linux/key.h>
 
+#define HAVE_FLUME_GETPID_PROTECTION 1
+
 struct ctl_table;
 
 /*
@@ -1217,6 +1219,11 @@
 	void (*task_reparent_to_init) (struct task_struct * p);
 	void (*task_to_inode)(struct task_struct *p, struct inode *inode);
 
+	int (*task_getpgid_self) (void);
+	int (*task_getsid_self) (void);
+	int (*task_getpid) (void);
+	int (*task_getppid) (void);
+
 	int (*ipc_permission) (struct kern_ipc_perm * ipcp, short flag);
 
 	int (*msg_msg_alloc_security) (struct msg_msg * msg);
@@ -1813,11 +1820,31 @@
 	return security_ops->task_getpgid (p);
 }
 
+static inline int security_task_getpgid_self (void)
+{
+	return security_ops->task_getpgid_self ();
+}
+
 static inline int security_task_getsid (struct task_struct *p)
 {
 	return security_ops->task_getsid (p);
 }
 
+static inline int security_task_getsid_self (void)
+{
+	return security_ops->task_getsid_self ();
+}
+
+static inline int security_task_getpid (void)
+{
+	return security_ops->task_getpid ();
+}
+
+static inline int security_task_getppid (void)
+{
+	return security_ops->task_getppid ();
+}
+
 static inline int security_task_setgroups (struct group_info *group_info)
 {
 	return security_ops->task_setgroups (group_info);
diff -ru ../linux-source-2.6.17/kernel/sys.c ./kernel/sys.c
--- ../linux-source-2.6.17/kernel/sys.c	2006-10-01 12:43:03.000000000 -0400
+++ ./kernel/sys.c	2007-07-24 20:03:44.000000000 -0400
@@ -1318,7 +1318,11 @@
 asmlinkage long sys_getpgid(pid_t pid)
 {
 	if (!pid) {
-		return process_group(current);
+		int retval;
+		retval = security_task_getpgid_self();
+		if (!retval)
+			retval = process_group(current);
+		return retval;	
 	} else {
 		int retval;
 		struct task_struct *p;
@@ -1350,7 +1354,11 @@
 asmlinkage long sys_getsid(pid_t pid)
 {
 	if (!pid) {
-		return current->signal->session;
+		int retval;
+		retval = security_task_getsid_self();
+		if (!retval)
+			retval = current->signal->session;
+		return retval;	
 	} else {
 		int retval;
 		struct task_struct *p;
diff -ru ../linux-source-2.6.17/kernel/timer.c ./kernel/timer.c
--- ../linux-source-2.6.17/kernel/timer.c	2006-10-01 12:43:03.000000000 -0400
+++ ./kernel/timer.c	2007-07-24 20:03:44.000000000 -0400
@@ -34,6 +34,7 @@
 #include <linux/cpu.h>
 #include <linux/syscalls.h>
 #include <linux/delay.h>
+#include <linux/security.h>
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
@@ -971,7 +972,11 @@
  */
 asmlinkage long sys_getpid(void)
 {
-	return current->tgid;
+    int retval;
+	retval = security_task_getpid ();
+	if (!retval)
+		retval = current->tgid;
+	return retval;	
 }
 
 /*
@@ -983,10 +988,15 @@
 asmlinkage long sys_getppid(void)
 {
 	int pid;
+	
+	pid = security_task_getppid ();
+	if (!pid) {
+
+		rcu_read_lock();
+		pid = rcu_dereference(current->real_parent)->tgid;
+		rcu_read_unlock();
 
-	rcu_read_lock();
-	pid = rcu_dereference(current->real_parent)->tgid;
-	rcu_read_unlock();
+	}
 
 	return pid;
 }
diff -ru ../linux-source-2.6.17/security/dummy.c ./security/dummy.c
--- ../linux-source-2.6.17/security/dummy.c	2006-10-01 12:43:06.000000000 -0400
+++ ./security/dummy.c	2007-07-24 20:03:44.000000000 -0400
@@ -501,11 +501,31 @@
 	return 0;
 }
 
+static int dummy_task_getpgid_self (void) 
+{ 
+	return 0;
+}
+
+static int dummy_task_getpid (void) 
+{ 
+	return 0;
+}
+
+static int dummy_task_getppid (void) 
+{ 
+	return 0;
+}
+
 static int dummy_task_getsid (struct task_struct *p)
 {
 	return 0;
 }
 
+static int dummy_task_getsid_self (void) 
+{ 
+	return 0;
+}
+
 static int dummy_task_setgroups (struct group_info *group_info)
 {
 	return 0;
@@ -970,6 +990,10 @@
 	set_to_dummy_if_null(ops, task_prctl);
 	set_to_dummy_if_null(ops, task_reparent_to_init);
  	set_to_dummy_if_null(ops, task_to_inode);
+	set_to_dummy_if_null(ops, task_getpgid_self);
+	set_to_dummy_if_null(ops, task_getsid_self);
+	set_to_dummy_if_null(ops, task_getppid);
+	set_to_dummy_if_null(ops, task_getpid);
 	set_to_dummy_if_null(ops, ipc_permission);
 	set_to_dummy_if_null(ops, msg_msg_alloc_security);
 	set_to_dummy_if_null(ops, msg_msg_free_security);
